[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Coverage settings
addopts =
    --strict-markers
    --tb=short
    --cov=src
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=80
    -p no:warnings
    --asyncio-mode=auto

# Test markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (with dependencies)
    e2e: End-to-end tests (full system)
    slow: Slow running tests
    benchmark: Performance benchmark tests
    gpu: Tests requiring GPU
    flaky: Flaky tests that may need retry

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Asyncio settings
asyncio_default_fixture_loop_scope = function

# Timeout settings
timeout = 300
timeout_method = thread

# Benchmark settings
benchmark_only = false
benchmark_skip = false
benchmark_disable_gc = true
benchmark_sort = mean
benchmark_group_by = group
benchmark_save = .benchmarks
benchmark_max_time = 1.0
benchmark_min_time = 0.000005
benchmark_min_rounds = 5

# Coverage exclusions
[coverage:run]
branch = True
source = src
omit =
    */tests/*
    */conftest.py
    */__init__.py
    */examples/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = True
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
