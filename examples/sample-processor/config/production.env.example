# Sample Processor Production Configuration Example
# Copy this file to .env and configure for your environment

# === Service Configuration ===
SERVICE_NAME=sample-processor
SERVICE_VERSION=1.0.0

# === Security Configuration ===
# CORS Origins (comma-separated)
CORS_ORIGINS=https://your-domain.com,https://api.your-domain.com

# Allowed hosts for host header validation (comma-separated)
ALLOWED_HOSTS=your-domain.com,api.your-domain.com,localhost

# Rate limiting
MAX_REQUESTS_PER_MINUTE=60

# Request size limits are enforced in code:
# - Max request size: 10MB
# - Max base64 frame data: ~7.5MB
# - Max metadata size: 100KB

# === Processor Configuration ===
# Detection threshold (0.0-1.0)
DETECTION_THRESHOLD=0.5

# Enable GPU simulation for testing
SIMULATE_GPU=false

# Processing delay in milliseconds (for testing)
PROCESSING_DELAY_MS=10

# === Frame Consumer Configuration ===
# Enable frame consumer (set to false for API-only mode)
ENABLE_FRAME_CONSUMER=true

# Frame buffer service URL
FRAME_BUFFER_URL=http://frame-buffer:8002

# Batch size for frame fetching
CONSUMER_BATCH_SIZE=10

# Polling interval in milliseconds
POLL_INTERVAL_MS=100

# === Connection Pool Configuration ===
# Number of connections in the pool
CONNECTION_POOL_SIZE=10

# Connection timeout in seconds
CONNECTION_TIMEOUT=30

# Read timeout in seconds
READ_TIMEOUT=60

# === Error Handling Configuration ===
# Maximum retries on error
MAX_RETRIES=3

# Initial backoff time in milliseconds
BACKOFF_MS=1000

# === Resource Limits ===
# CPU cores to allocate (for resource manager)
CPU_CORES=2

# Memory limit in MB
MEMORY_LIMIT_MB=1024

# === Observability ===
# Enable metrics collection
ENABLE_METRICS=true

# Enable distributed tracing
ENABLE_TRACING=true

# Jaeger endpoint (if using tracing)
JAEGER_ENDPOINT=http://jaeger:14268/api/traces

# === Graceful Shutdown ===
# Timeout for graceful shutdown in seconds
GRACEFUL_SHUTDOWN_TIMEOUT=30

# === Health Check ===
# Health check interval in seconds (internal)
HEALTH_CHECK_INTERVAL=30

# === Production Recommendations ===
# 1. Always use HTTPS in production
# 2. Configure proper CORS origins (not *)
# 3. Set appropriate rate limits based on load
# 4. Monitor resource usage and adjust limits
# 5. Enable metrics and tracing for observability
# 6. Use connection pooling for better performance
# 7. Configure proper timeouts to prevent hanging
# 8. Implement proper logging and monitoring
# 9. Use environment-specific configuration
# 10. Regularly review and update security settings
