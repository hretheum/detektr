version: '3.8'

# Based on eofek/detektor patterns with simplifications
# Reference: docs/analysis/eofek-detektor-analysis.md

services:
  # Database
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: detektor-postgres
    environment:
      POSTGRES_DB: detektor
      POSTGRES_USER: ${POSTGRES_USER:-detektor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-detektor}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Message Queue
  redis:
    image: redis:7-alpine
    container_name: detektor-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: detektor-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - detektor-network
    restart: unless-stopped

  # Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: detektor-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - detektor-network
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: detektor-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - detektor-network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: detektor-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - detektor-network
    ports:
      - "3100:3100"
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  loki-data:

networks:
  detektor-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16