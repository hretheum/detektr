version: "3.8"

x-common-variables: &common-variables
  REDIS_HOST: redis
  REDIS_PORT: 6379
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces

x-common-service: &common-service
  build:
    context: .
    dockerfile: Dockerfile
  restart: unless-stopped
  environment:
    <<: *common-variables
  networks:
    - detektor-network
  depends_on:
    - redis

services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenTelemetry example service
  example-otel:
    image: example-otel:simple # TODO: Change to ghcr.io/hretheum/bezrobocie-detektor/example-otel:latest after GitHub login
    restart: unless-stopped
    ports:
      - "8005:8000"
    environment:
      <<: *common-variables
      SERVICE_NAME: example-otel
      PORT: 8000
      OTEL_SERVICE_NAME: example-otel
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://jaeger:4317}
      OTEL_RESOURCE_ATTRIBUTES: ${OTEL_RESOURCE_ATTRIBUTES:-deployment.environment=production}
      PYTHONPATH: /app
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  # Frame tracking service with event sourcing
  frame-tracking:
    image: ghcr.io/hretheum/bezrobocie-detektor/frame-tracking:latest
    build:
      context: .
      dockerfile: services/frame-tracking/Dockerfile
    restart: unless-stopped
    ports:
      - "8006:8006"
    environment:
      <<: *common-variables
      SERVICE_NAME: frame-tracking
      PORT: 8006
      DATABASE_URL: postgresql+asyncpg://detektor:detektor_pass@postgres:5432/detektor_db
      OTEL_SERVICE_NAME: frame-tracking
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://jaeger:4317}
      OTEL_RESOURCE_ATTRIBUTES: ${OTEL_RESOURCE_ATTRIBUTES:-deployment.environment=production}
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      # postgres is in docker-compose.storage.yml

  # Base template service - wzorzec dla nowych serwisÃ³w
  base-template:
    image: ghcr.io/hretheum/bezrobocie-detektor/base-template:latest
    build:
      context: .
      dockerfile: services/base-template/Dockerfile
    restart: unless-stopped
    ports:
      - "8010:8000"
    environment:
      <<: *common-variables
      SERVICE_NAME: base-template
      PORT: 8000
      DATABASE_URL: postgresql+asyncpg://detektor:detektor_pass@postgres:5432/detektor_db
      OTEL_SERVICE_NAME: base-template
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://jaeger:4317}
      OTEL_RESOURCE_ATTRIBUTES: ${OTEL_RESOURCE_ATTRIBUTES:-deployment.environment=production}
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      # postgres is in docker-compose.storage.yml

  # Echo service - prosty serwis demonstracyjny
  echo-service:
    image: ghcr.io/hretheum/bezrobocie-detektor/echo-service:latest
    build:
      context: .
      dockerfile: services/echo-service/Dockerfile
    restart: unless-stopped
    ports:
      - "8007:8007"
    environment:
      <<: *common-variables
      SERVICE_NAME: echo-service
      PORT: 8007
      OTEL_SERVICE_NAME: echo-service
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://jaeger:4317}
      OTEL_RESOURCE_ATTRIBUTES: ${OTEL_RESOURCE_ATTRIBUTES:-deployment.environment=production}
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  # GPU Demo Service - ML inference with GPU support
  # Note: Requires docker-compose.gpu.yml for full GPU configuration
  gpu-demo:
    image: ghcr.io/hretheum/bezrobocie-detektor/gpu-demo:latest
    container_name: gpu-demo
    ports:
      - "8008:8008"
    environment:
      - SERVICE_NAME=gpu-demo
      - SERVICE_VERSION=0.1.0
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - LOG_LEVEL=info
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8008"
      - "prometheus.io/path=/metrics"

  # RTSP Capture Service - przechwytywanie strumieni RTSP z kamer
  rtsp-capture:
    image: ghcr.io/hretheum/bezrobocie-detektor/rtsp-capture:latest
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      <<: *common-variables
      SERVICE_NAME: rtsp-capture
      PORT: 8001
      RTSP_URL: ${RTSP_URL:-rtsp://localhost:8554/stream}
      FRAME_BUFFER_SIZE: ${FRAME_BUFFER_SIZE:-100}
      OTEL_SERVICE_NAME: rtsp-capture
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://jaeger:4317}
      OTEL_RESOURCE_ATTRIBUTES: ${OTEL_RESOURCE_ATTRIBUTES:-deployment.environment=production}
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8001"
      - "prometheus.io/path=/metrics"

volumes:
  redis-data:

networks:
  detektor-network:
    driver: bridge
