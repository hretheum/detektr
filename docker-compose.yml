services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: timescale/timescaledb:latest-pg16
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: detektor
      POSTGRES_PASSWORD: detektor_pass
      POSTGRES_DB: detektor_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d:ro
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  example-otel:
    image: example-otel:simple
    restart: unless-stopped
    ports:
      - "8005:8000"
    environment:
      SERVICE_NAME: example-otel
      PORT: 8000
      OTEL_SERVICE_NAME: example-otel
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  frame-tracking:
    image: ghcr.io/hretheum/bezrobocie-detektor/frame-tracking:latest
    build:
      context: .
      dockerfile: services/frame-tracking/Dockerfile
    restart: unless-stopped
    ports:
      - "8006:8006"
    environment:
      SERVICE_NAME: frame-tracking
      PORT: 8006
      DATABASE_URL: postgresql+asyncpg://detektor:detektor_pass@postgres:5432/detektor_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - redis
      - postgres

  echo-service:
    image: ghcr.io/hretheum/bezrobocie-detektor/echo-service:latest
    build:
      context: .
      dockerfile: services/echo-service/Dockerfile
    restart: unless-stopped
    ports:
      - "8007:8007"
    environment:
      SERVICE_NAME: echo-service
      PORT: 8007
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  gpu-demo:
    image: ghcr.io/hretheum/bezrobocie-detektor/gpu-demo:latest
    container_name: gpu-demo
    restart: unless-stopped
    ports:
      - "8008:8008"
    environment:
      SERVICE_NAME: gpu-demo
      SERVICE_VERSION: 0.1.0
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  rtsp-capture:
    image: ghcr.io/hretheum/bezrobocie-detektor/rtsp-capture:latest
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      SERVICE_NAME: rtsp-capture
      PORT: 8001
      RTSP_URL: ${RTSP_URL:-rtsp://localhost:8554/stream}
      FRAME_BUFFER_SIZE: ${FRAME_BUFFER_SIZE:-100}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  frame-buffer:
    image: ghcr.io/hretheum/bezrobocie-detektor/frame-buffer:latest
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      SERVICE_NAME: frame-buffer
      PORT: 8002
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      FRAME_QUEUE_NAME: frame_queue
      DLQ_NAME: frame_dlq
      MAX_BUFFER_SIZE: ${MAX_BUFFER_SIZE:-1000}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

volumes:
  redis-data:
  postgres-data:

networks:
  detektor-network:
    driver: bridge
