name: Deploy RTSP Capture Service

on:
  workflow_run:
    workflows: ["RTSP Capture Service CI/CD"]
    types:
      - completed
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/rtsp-capture

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set deployment environment
      id: set-env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "namespace=detektor-prod" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "namespace=detektor-staging" >> $GITHUB_OUTPUT
        fi

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Deploy with Helm
      run: |
        helm upgrade --install rtsp-capture ./helm/rtsp-capture \
          --namespace ${{ steps.set-env.outputs.namespace }} \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set environment=${{ steps.set-env.outputs.environment }} \
          --wait --timeout=10m

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/rtsp-capture -n ${{ steps.set-env.outputs.namespace }} --timeout=300s
        kubectl get pods -n ${{ steps.set-env.outputs.namespace }} -l app=rtsp-capture

    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app=rtsp-capture -n ${{ steps.set-env.outputs.namespace }} --timeout=300s

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to ${{ steps.set-env.outputs.environment }}: ${{ job.status }}
          Commit: ${{ github.sha }}
          Repository: ${{ github.repository }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
