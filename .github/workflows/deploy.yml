name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_to_nebula:
        description: 'Deploy to Nebula server after build'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: hretheum/bezrobocie-detektor

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - example-otel
          # TODO: DodaÄ‡ po implementacji:
          # - frame-tracking
          # - echo-service
          # - gpu-demo
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  deploy:
    name: Deploy to Nebula
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install age for SOPS
        run: |
          AGE_VERSION="1.1.1"
          curl -LO "https://github.com/FiloSottile/age/releases/download/v${AGE_VERSION}/age-v${AGE_VERSION}-linux-amd64.tar.gz"
          tar xzf age-v${AGE_VERSION}-linux-amd64.tar.gz
          sudo mv age/age /usr/local/bin/
          sudo mv age/age-keygen /usr/local/bin/

      - name: Install SOPS
        run: |
          SOPS_VERSION="3.8.1"
          curl -LO "https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64"
          sudo mv sops-v${SOPS_VERSION}.linux.amd64 /usr/local/bin/sops
          sudo chmod +x /usr/local/bin/sops

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.NEBULA_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.NEBULA_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Nebula
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
          NEBULA_HOST: ${{ secrets.NEBULA_HOST }}
          NEBULA_USER: ${{ secrets.NEBULA_USER }}
        run: |
          # Deploy using the deployment script
          ./scripts/deploy-to-nebula.sh

      - name: Clean up
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f .env.decrypted
