name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_to_nebula:
        description: 'Deploy to Nebula server after build'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: hretheum/bezrobocie-detektor

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - example-otel
          - frame-tracking
          - base-template
          - echo-service
          # TODO: Fix gpu-demo build issues
          # - gpu-demo
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  # deploy:
  #   name: Deploy to Nebula
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Install age for SOPS
  #       run: |
  #         AGE_VERSION="1.1.1"
  #         curl -LO "https://github.com/FiloSottile/age/releases/download/v${AGE_VERSION}/age-v${AGE_VERSION}-linux-amd64.tar.gz"
  #         tar xzf age-v${AGE_VERSION}-linux-amd64.tar.gz
  #         sudo mv age/age /usr/local/bin/
  #         sudo mv age/age-keygen /usr/local/bin/
  #
  #     - name: Install SOPS
  #       run: |
  #         SOPS_VERSION="3.8.1"
  #         curl -LO "https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64"
  #         sudo mv sops-v${SOPS_VERSION}.linux.amd64 /usr/local/bin/sops
  #         sudo chmod +x /usr/local/bin/sops
  #
  #     - name: Configure SSH
  #       env:
  #         SSH_PRIVATE_KEY: ${{ secrets.NEBULA_SSH_KEY }}
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -H ${{ secrets.NEBULA_HOST }} >> ~/.ssh/known_hosts
  #
  #     - name: Deploy to Nebula
  #       env:
  #         SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
  #         NEBULA_HOST: ${{ secrets.NEBULA_HOST }}
  #         NEBULA_USER: ${{ secrets.NEBULA_USER }}
  #       run: |
  #         # Deploy using the deployment script
  #         ./scripts/deploy-to-nebula.sh
  #
  #     - name: Clean up
  #       if: always()
  #       run: |
  #         rm -f ~/.ssh/id_rsa
  #         rm -f .env.decrypted

  deploy-self-hosted:
    name: Deploy via Self-hosted Runner
    needs: build-and-push
    runs-on: [self-hosted, nebula]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Nebula
        run: |
          echo "üöÄ Deploying via self-hosted runner..."

          # Configuration
          REGISTRY="ghcr.io"
          IMAGE_PREFIX="hretheum/bezrobocie-detektor"
          DEPLOY_DIR="/opt/detektor"

          # Pull latest images
          echo "üì¶ Pulling latest images..."
          docker pull ${REGISTRY}/${IMAGE_PREFIX}/example-otel:latest
          docker pull ${REGISTRY}/${IMAGE_PREFIX}/frame-tracking:latest
          docker pull ${REGISTRY}/${IMAGE_PREFIX}/base-template:latest
          docker pull ${REGISTRY}/${IMAGE_PREFIX}/echo-service:latest

          # Create docker-compose.prod.yml
          cd ${DEPLOY_DIR}

          cat > docker-compose.prod.yml << 'COMPOSE_EOF'
          services:
            example-otel:
              image: ${REGISTRY}/${IMAGE_PREFIX}/example-otel:latest
              container_name: example-otel
              ports:
                - "8005:8005"
              environment:
                - SERVICE_NAME=example-otel
                - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
              networks:
                - detektor-network
              restart: unless-stopped

            frame-tracking:
              image: ${REGISTRY}/${IMAGE_PREFIX}/frame-tracking:latest
              container_name: frame-tracking
              ports:
                - "8006:8006"
              environment:
                - SERVICE_NAME=frame-tracking
                - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
              networks:
                - detektor-network
              restart: unless-stopped

            base-template:
              image: ${REGISTRY}/${IMAGE_PREFIX}/base-template:latest
              container_name: base-template
              ports:
                - "8010:8010"
              environment:
                - SERVICE_NAME=base-template
                - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
              networks:
                - detektor-network
              restart: unless-stopped

            echo-service:
              image: ${REGISTRY}/${IMAGE_PREFIX}/echo-service:latest
              container_name: echo-service
              ports:
                - "8007:8007"
              environment:
                - SERVICE_NAME=echo-service
                - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
              networks:
                - detektor-network
              restart: unless-stopped

          networks:
            detektor-network:
              external: true
          COMPOSE_EOF

          # Ensure network exists
          docker network create detektor-network 2>/dev/null || true

          # Start infrastructure
          echo "üöÄ Starting infrastructure services..."
          docker compose -f docker-compose.observability.yml up -d
          docker compose -f docker-compose.storage.yml up -d

          # Wait for infrastructure
          sleep 10

          # Deploy application services
          echo "üöÄ Deploying application services..."
          docker compose -f docker-compose.prod.yml up -d

          # Health check
          echo "üè• Health check..."
          sleep 5

          for port in 8005 8006 8007 8010; do
            if curl -sf "http://localhost:${port}/health" >/dev/null 2>&1; then
              echo "‚úÖ Service on port ${port} is healthy"
            else
              echo "‚ùå Service on port ${port} is not responding"
            fi
          done

          echo "‚úÖ Deployment completed!"
