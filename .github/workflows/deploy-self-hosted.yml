name: Build and Deploy (Self-hosted) - Optimized
# This is an optimized version that only builds changed services

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_all:
        description: 'Force build all services'
        required: false
        default: false
        type: boolean
      services:
        description: 'Services to build (comma-separated, e.g. "frame-buffer,telegram-alerts")'
        required: false
        default: ''
        type: string
      skip_deploy:
        description: 'Skip deployment (only build)'
        required: false
        default: false
        type: boolean
      skip_build:
        description: 'Skip build (only deploy)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: hretheum/bezrobocie-detektor

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
      any_changed: ${{ steps.set-matrix.outputs.any_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for proper change detection

      - name: Detect changed services
        uses: dorny/paths-filter@v2
        id: filter
        # Skip on manual trigger to avoid warning
        if: github.event_name != 'workflow_dispatch'
        with:
          list-files: shell
          filters: |
            example-otel:
              - 'services/example-otel/**'
              - 'services/base-template/**'
            frame-tracking:
              - 'services/frame-tracking/**'
              - 'services/base-template/**'
            base-template:
              - 'services/base-template/**'
            echo-service:
              - 'services/echo-service/**'
              - 'services/base-template/**'
            gpu-demo:
              - 'services/gpu-demo/**'
            rtsp-capture:
              - 'services/rtsp-capture/**'
            frame-buffer:
              - 'services/frame-buffer/**'
              - 'services/base-template/**'
            telegram-alerts:
              - 'services/telegram-alerts/**'
            metadata-storage:
              - 'services/metadata-storage/**'
              - 'services/base-template/**'

      - name: Set matrix output
        id: set-matrix
        run: |
          # Check if force all is enabled
          if [ "${{ github.event.inputs.force_all }}" = "true" ]; then
            echo "Force all services enabled"
            echo "services=[]" >> $GITHUB_OUTPUT
            echo "any_changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if manual services specified
          MANUAL_SERVICES='${{ github.event.inputs.services }}'

          if [ -n "$MANUAL_SERVICES" ]; then
            # Convert comma-separated to JSON array
            # Handle spaces and ensure proper JSON format
            SERVICES_JSON=$(echo "$MANUAL_SERVICES" | tr ',' '\n' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//' | sed 's/^/"/;s/$/"/' | paste -sd, | sed 's/^/[/;s/$/]/')
            echo "Manual services selected: $SERVICES_JSON"
            echo "services=$SERVICES_JSON" >> $GITHUB_OUTPUT
            echo "any_changed=true" >> $GITHUB_OUTPUT
          else
            # Check if this is manual trigger without filter
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "Manual trigger without services specified"
              echo "services=[]" >> $GITHUB_OUTPUT
              echo "any_changed=false" >> $GITHUB_OUTPUT
            else
              # Get changed services from filter
              CHANGED_SERVICES='${{ steps.filter.outputs.changes }}'

              # Check if we have any changes
              if [ "$CHANGED_SERVICES" = "[]" ] || [ -z "$CHANGED_SERVICES" ]; then
                echo "No services changed"
                echo "services=[]" >> $GITHUB_OUTPUT
                echo "any_changed=false" >> $GITHUB_OUTPUT
              else
                echo "Changed services: $CHANGED_SERVICES"
                echo "services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT
                echo "any_changed=true" >> $GITHUB_OUTPUT
              fi
            fi
          fi

  build-and-push:
    name: Build and Push Changed Services
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true' && github.event.inputs.skip_build != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false  # Keep Docker
          swap-storage: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  build-all-forced:
    name: Build All Services (Forced)
    if: github.event.inputs.force_all == 'true' && github.event.inputs.skip_build != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - example-otel
          - frame-tracking
          - base-template
          - echo-service
          - gpu-demo
          - rtsp-capture
          - frame-buffer
          - telegram-alerts
          - metadata-storage
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false  # Keep Docker
          swap-storage: true

      # Same steps as build-and-push job
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  deploy:
    name: Deploy to Nebula
    needs: [detect-changes, build-and-push, build-all-forced]
    # Deploy gdy są zmiany lub force build (chyba że skip_deploy)
    # Lub gdy skip_build jest włączony (tylko deploy)
    if: |
      always() &&
      github.ref == 'refs/heads/main' &&
      github.event.inputs.skip_deploy != 'true' &&
      (
        github.event.inputs.skip_build == 'true' ||
        needs.build-and-push.result == 'success' ||
        needs.build-all-forced.result == 'success' ||
        (needs.build-and-push.result == 'skipped' && needs.build-all-forced.result == 'skipped')
      )
    runs-on: [self-hosted, nebula]
    steps:
      - name: Clean workspace
        run: |
          echo "Cleaning workspace to avoid permission issues..."
          # Remove directories that might have wrong permissions
          sudo rm -rf ${{ github.workspace }}/init-scripts || true
          sudo rm -rf ${{ github.workspace }}/grafana || true
          sudo rm -rf ${{ github.workspace }}/config || true
          # Ensure workspace is owned by runner
          sudo chown -R $USER:$USER ${{ github.workspace }} || true

      - name: Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/deploy-local-on-nebula.sh
            scripts/health-check-all.sh
            docker-compose.yml
            docker-compose.*.yml
            docker-compose.prod.yml
            .env
            .env.*
            config/
            prometheus.yml
            init-scripts/
          sparse-checkout-cone-mode: false

      - name: Pre-deployment cleanup
        run: |
          echo "🧹 Czyszczenie przed deploymentem..."

          # Zatrzymaj wszystkie kontenery projektu detektr
          echo "Zatrzymuję kontenery projektu detektr..."
          sudo docker ps -q --filter "label=com.docker.compose.project=detektr" | xargs -r sudo docker stop || true
          sudo docker ps -aq --filter "label=com.docker.compose.project=detektr" | xargs -r sudo docker rm -f || true

          # Zatrzymaj kontenery które mogą blokować porty
          echo "Usuwam stare kontenery..."
          # Stare kontenery z różnych plików compose
          sudo docker rm -f sentinel-1 sentinel-2 sentinel-3 redis-slave redis-master 2>/dev/null || true
          sudo docker rm -f detektor-telegram-alerts detektor-loki-1 2>/dev/null || true
          # Kontenery które mogły być ręcznie uruchomione
          sudo docker rm -f gpu-demo detektr-redis-1 detektr-postgres-1 postgres redis 2>/dev/null || true

          # Sprawdź zajęte porty - WSZYSTKIE z docker-compose
          for port in 5432 5050 6379 6380 26379 26380 26381 8001 8005 8006 8007 8008 9090 9121 9400 3000 3100 16686 14268 4317 4318; do
            if sudo lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
              echo "⚠️ Port $port jest zajęty, próbuję zwolnić..."

              # Znajdź kontener używający portu
              container=$(sudo docker ps -a --format "{{.Names}}" | while read -r name; do
                if sudo docker port "$name" 2>/dev/null | grep -q ":$port"; then
                  echo "$name"
                  break
                fi
              done)

              if [ -n "$container" ]; then
                echo "Zatrzymuję kontener: $container"
                sudo docker stop "$container" 2>/dev/null || true
                sudo docker rm -f "$container" 2>/dev/null || true
              fi
            fi
          done

          # Poczekaj na zwolnienie portów
          sleep 3

      - name: Deploy to Nebula
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_PREFIX: ${{ env.IMAGE_PREFIX }}
          SKIP_HOSTNAME_CHECK: 1
          CHANGED_SERVICES: ${{ needs.detect-changes.outputs.services }}
        run: |
          chmod +x scripts/deploy-local-on-nebula.sh

          # Log what services were updated
          if [ -n "$CHANGED_SERVICES" ]; then
            echo "🔄 Deploying updated services: $CHANGED_SERVICES"
          else
            echo "📦 Deploying all services (forced)"
          fi

          ./scripts/deploy-local-on-nebula.sh

      - name: Deployment Summary
        if: always()
        env:
          CHANGED_SERVICES: ${{ needs.detect-changes.outputs.services }}
        run: |
          echo "🚀 Deployment Summary"
          echo "===================="
          echo "Target: Nebula (self-hosted runner)"
          echo ""
          if [ -n "$CHANGED_SERVICES" ]; then
            echo "Updated services:"
            echo "$CHANGED_SERVICES" | jq -r '.[]' | while read service; do
              echo "  ✅ ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/$service:latest"
            done
          else
            echo "All services deployed (forced build)"
          fi
          echo ""
          echo "Deployment completed at: $(date)"
