name: Simple Deploy to Nebula

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/detektr

jobs:
  # Build on GitHub runners
  build:
    name: Build Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build wszystkich serwis√≥w
      - name: Build and push images
        run: |
          SERVICES=(
            "rtsp-capture"
            "frame-tracking"
            "frame-buffer"
            "metadata-storage"
            "base-template"
            "echo-service"
            "example-otel"
            "gpu-demo"
            "pgbouncer"
          )

          for service in "${SERVICES[@]}"; do
            echo "Building $service..."
            docker buildx build \
              --push \
              --platform linux/amd64 \
              --tag ${{ env.IMAGE_PREFIX }}/$service:latest \
              --tag ${{ env.IMAGE_PREFIX }}/$service:${{ github.sha }} \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              -f services/$service/Dockerfile \
              services/$service/ || echo "Failed to build $service, continuing..."
          done

  # Deploy on self-hosted runner (Nebula)
  deploy:
    name: Deploy to Nebula
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker/
            scripts/
            .env.sops
          sparse-checkout-cone-mode: false

      - name: Deploy Services
        run: |
          # We're already on Nebula, no SSH needed
          cd /opt/detektor-clean

          # Pull latest changes
          git pull origin main || true

          # Login to registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Export variables
          export IMAGE_TAG=latest
          export COMPOSE_PROJECT_NAME=detektor
          export POSTGRES_PASSWORD=detektor_pass
          export GRAFANA_PASSWORD=admin

          # Stop old containers
          docker compose -f docker/base/docker-compose.yml \
            -f docker/base/docker-compose.storage.yml \
            -f docker/base/docker-compose.observability.yml \
            -f docker/environments/production/docker-compose.yml \
            down --remove-orphans || true

          # Pull new images
          docker compose -f docker/base/docker-compose.yml \
            -f docker/base/docker-compose.storage.yml \
            -f docker/base/docker-compose.observability.yml \
            -f docker/environments/production/docker-compose.yml \
            pull

          # Start services
          docker compose -f docker/base/docker-compose.yml \
            -f docker/base/docker-compose.storage.yml \
            -f docker/base/docker-compose.observability.yml \
            -f docker/environments/production/docker-compose.yml \
            up -d

          # Check status
          sleep 10
          docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "detektor|NAME"
