name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          subjectPattern: ^[A-Z].+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            doesn't match the configured pattern. Please ensure that the subject
            starts with an uppercase letter.

  size-label:
    name: Add Size Label
    runs-on: ubuntu-latest
    steps:
      - uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/XS'
          xs_max_size: 10
          s_label: 'size/S'
          s_max_size: 100
          m_label: 'size/M'
          m_max_size: 500
          l_label: 'size/L'
          l_max_size: 1000
          xl_label: 'size/XL'
          fail_if_xl: false

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  # =================================
  # TESTS SECTION (from ci.yml)
  # =================================
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy

      - name: Find and test Python services
        run: |
          echo "### 🧪 Python Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Find all services with Python tests
          services_with_tests=()
          for service in services/*/; do
            if [ -f "$service/requirements.txt" ] && [ -d "$service/tests" ]; then
              services_with_tests+=("$service")
            fi
          done

          if [ ${#services_with_tests[@]} -eq 0 ]; then
            echo "No Python services with tests found" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Run tests for each service
          for service in "${services_with_tests[@]}"; do
            service_name=$(basename "$service")
            echo "Testing $service_name..."
            echo "#### $service_name" >> $GITHUB_STEP_SUMMARY

            cd "$service"

            # Install dependencies
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt
            fi
            if [ -f "requirements-dev.txt" ]; then
              pip install -r requirements-dev.txt
            fi

            # Run linters
            echo "Running linters..."
            black --check . || echo "⚠️ Black formatting issues" >> $GITHUB_STEP_SUMMARY
            flake8 . --exclude=venv,__pycache__ || echo "⚠️ Flake8 issues" >> $GITHUB_STEP_SUMMARY

            # Run tests
            if python -m pytest tests/ -v --cov=. --cov-report=term-missing; then
              echo "✅ Tests passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Tests failed" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            cd - > /dev/null
            echo "" >> $GITHUB_STEP_SUMMARY
          done

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker builds
        run: |
          echo "### 🐳 Docker Build Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Find all services with Dockerfiles
          services_with_docker=()
          for dockerfile in services/*/Dockerfile; do
            if [ -f "$dockerfile" ]; then
              service_dir=$(dirname "$dockerfile")
              services_with_docker+=("$service_dir")
            fi
          done

          if [ ${#services_with_docker[@]} -eq 0 ]; then
            echo "No services with Dockerfiles found" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Test build each service
          failed_builds=()
          for service_dir in "${services_with_docker[@]}"; do
            service_name=$(basename "$service_dir")
            echo "Building $service_name..."

            if docker build -t "test-$service_name:pr-${{ github.event.pull_request.number }}" "$service_dir"; then
              echo "✅ $service_name" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ $service_name" >> $GITHUB_STEP_SUMMARY
              failed_builds+=("$service_name")
            fi
          done

          if [ ${#failed_builds[@]} -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Failed builds**: ${failed_builds[*]}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # =================================
  # SUMMARY
  # =================================
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [pr-title, size-label, dependency-review, python-tests, docker-build-test]
    if: always()
    steps:
      - name: Generate PR Summary
        run: |
          echo "## 📋 PR Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PR Title Validation | ${{ needs.pr-title.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Size Labeling | ${{ needs.size-label.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Review | ${{ needs.dependency-review.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Tests | ${{ needs.python-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build Test | ${{ needs.docker-build-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ "${{ needs.pr-title.result }}" == "success" && \
                "${{ needs.dependency-review.result }}" == "success" && \
                "${{ needs.python-tests.result }}" == "success" && \
                "${{ needs.docker-build-test.result }}" == "success" ]]; then
            echo "✅ **All checks passed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed**" >> $GITHUB_STEP_SUMMARY
          fi
