name: Scheduled Tasks
# Consolidated workflow combining:
# - scheduled-tasks.yml
# - ghcr-cleanup.yml
# - cleanup-runner.yml

on:
  schedule:
    # Daily at 2 AM UTC
    - cron: '0 2 * * *'
    # Weekly on Sunday at 4 AM UTC
    - cron: '0 4 * * 0'
    # Monthly on 1st at 3 AM UTC
    - cron: '0 3 1 * *'
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to run'
        required: true
        type: choice
        options:
          - all
          - daily-cleanup
          - weekly-maintenance
          - monthly-audit
          - ghcr-cleanup
          - runner-cleanup
          - security-scan
          - backup
      dry_run:
        description: 'Dry run mode'
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/hretheum/detektr

jobs:
  # =================================
  # DETERMINE TASKS
  # =================================
  determine-tasks:
    name: Determine Tasks to Run
    runs-on: ubuntu-latest
    outputs:
      daily: ${{ steps.schedule.outputs.daily }}
      weekly: ${{ steps.schedule.outputs.weekly }}
      monthly: ${{ steps.schedule.outputs.monthly }}
    steps:
      - name: Check Schedule
        id: schedule
        run: |
          # Manual trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            case "${{ github.event.inputs.task }}" in
              "all")
                echo "daily=true" >> $GITHUB_OUTPUT
                echo "weekly=true" >> $GITHUB_OUTPUT
                echo "monthly=true" >> $GITHUB_OUTPUT
                ;;
              "daily-cleanup"|"ghcr-cleanup"|"runner-cleanup")
                echo "daily=true" >> $GITHUB_OUTPUT
                echo "weekly=false" >> $GITHUB_OUTPUT
                echo "monthly=false" >> $GITHUB_OUTPUT
                ;;
              "weekly-maintenance"|"security-scan")
                echo "daily=false" >> $GITHUB_OUTPUT
                echo "weekly=true" >> $GITHUB_OUTPUT
                echo "monthly=false" >> $GITHUB_OUTPUT
                ;;
              "monthly-audit"|"backup")
                echo "daily=false" >> $GITHUB_OUTPUT
                echo "weekly=false" >> $GITHUB_OUTPUT
                echo "monthly=true" >> $GITHUB_OUTPUT
                ;;
            esac
          else
            # Scheduled trigger - determine based on cron
            hour=$(date -u +%H)
            day_of_week=$(date -u +%w)
            day_of_month=$(date -u +%d)

            # Daily tasks (2 AM)
            if [[ "$hour" == "02" ]]; then
              echo "daily=true" >> $GITHUB_OUTPUT
            else
              echo "daily=false" >> $GITHUB_OUTPUT
            fi

            # Weekly tasks (Sunday 4 AM)
            if [[ "$hour" == "04" && "$day_of_week" == "0" ]]; then
              echo "weekly=true" >> $GITHUB_OUTPUT
            else
              echo "weekly=false" >> $GITHUB_OUTPUT
            fi

            # Monthly tasks (1st at 3 AM)
            if [[ "$hour" == "03" && "$day_of_month" == "01" ]]; then
              echo "monthly=true" >> $GITHUB_OUTPUT
            else
              echo "monthly=false" >> $GITHUB_OUTPUT
            fi
          fi

  # =================================
  # DAILY TASKS
  # =================================
  daily-cleanup:
    name: Daily Cleanup Tasks
    needs: determine-tasks
    if: needs.determine-tasks.outputs.daily == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: GHCR Cleanup - Untagged Images
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🧹 Cleaning untagged images from GHCR..."

          # Configuration
          RETENTION_DAYS=7
          MIN_VERSIONS_TO_KEEP=5

          # Get all packages
          packages=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/hretheum/packages?package_type=container \
            --jq '.[].name' | grep "^detektr/" || true)

          for package in $packages; do
            echo "Processing package: $package"

            # Get untagged versions older than retention period
            cutoff_date=$(date -u -d "$RETENTION_DAYS days ago" +%Y-%m-%dT%H:%M:%SZ)

            versions=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/orgs/hretheum/packages/container/$package/versions?per_page=100" \
              --jq ".[] | select(.metadata.container.tags | length == 0) | select(.updated_at < \"$cutoff_date\") | .id" || true)

            if [[ -z "$versions" ]]; then
              echo "  No untagged versions to clean"
              continue
            fi

            count=0
            for version_id in $versions; do
              if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
                echo "  DRY RUN - Would delete version: $version_id"
              else
                echo "  Deleting version: $version_id"
                gh api \
                  --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "/orgs/hretheum/packages/container/$package/versions/$version_id" || true
              fi
              ((count++))
            done

            echo "  Cleaned $count untagged versions"
          done

      - name: Log Rotation
        run: |
          echo "📋 Log rotation task (placeholder)"
          echo "Would rotate logs in:"
          echo "  - /var/log/github-runner/"
          echo "  - /var/log/github-webhook/"
          echo "  - /var/log/detektor/"

  runner-cleanup:
    name: Runner Cleanup
    needs: determine-tasks
    if: needs.determine-tasks.outputs.daily == 'true'
    runs-on: self-hosted
    steps:
      - name: Clean Runner Work Directory
        run: |
          echo "🧹 Cleaning runner work directory..."

          # Clean old workflow runs
          if [[ -d "$RUNNER_WORKSPACE" ]]; then
            find "$RUNNER_WORKSPACE" -type d -name "_work" -mtime +3 -exec rm -rf {} + 2>/dev/null || true
          fi

          # Clean temp directory
          if [[ -d "$RUNNER_TEMP" ]]; then
            find "$RUNNER_TEMP" -type f -mtime +1 -delete 2>/dev/null || true
          fi

          # Show disk usage
          echo "Disk usage after cleanup:"
          df -h "$RUNNER_WORKSPACE" || df -h .

  # =================================
  # WEEKLY TASKS
  # =================================
  weekly-maintenance:
    name: Weekly Maintenance
    needs: determine-tasks
    if: needs.determine-tasks.outputs.weekly == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: GHCR Cleanup - Old Tagged Images
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🧹 Cleaning old tagged images from GHCR..."

          # Configuration
          RETENTION_DAYS=30
          MIN_VERSIONS_TO_KEEP=10

          # Get all packages
          packages=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/hretheum/packages?package_type=container \
            --jq '.[].name' | grep "^detektr/" || true)

          for package in $packages; do
            echo "Processing package: $package"

            # Get all versions sorted by date
            versions=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/orgs/hretheum/packages/container/$package/versions?per_page=100" \
              --jq 'sort_by(.updated_at) | reverse' || echo "[]")

            # Keep minimum versions and recent ones
            total=$(echo "$versions" | jq 'length')
            if [[ $total -le $MIN_VERSIONS_TO_KEEP ]]; then
              echo "  Only $total versions exist, keeping all"
              continue
            fi

            # Delete old versions beyond retention
            cutoff_date=$(date -u -d "$RETENTION_DAYS days ago" +%Y-%m-%dT%H:%M:%SZ)

            to_delete=$(echo "$versions" | jq -r "
              .[$MIN_VERSIONS_TO_KEEP:] |
              .[] |
              select(.updated_at < \"$cutoff_date\") |
              select(.metadata.container.tags | any(. | test(\"^(latest|main|staging|production)$\") | not)) |
              .id
            ")

            if [[ -z "$to_delete" ]]; then
              echo "  No versions to delete"
              continue
            fi

            count=0
            for version_id in $to_delete; do
              if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
                echo "  DRY RUN - Would delete version: $version_id"
              else
                echo "  Deleting version: $version_id"
                gh api \
                  --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "/orgs/hretheum/packages/container/$package/versions/$version_id" || true
              fi
              ((count++))
            done

            echo "  Cleaned $count old versions"
          done

  security-scan:
    name: Weekly Security Scan
    needs: determine-tasks
    if: needs.determine-tasks.outputs.weekly == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy Security Scan
        run: |
          echo "🔍 Running weekly security scan..."

          # Scan repository
          docker run --rm \
            -v "$PWD:/src" \
            aquasec/trivy fs /src \
            --severity HIGH,CRITICAL \
            --format table

      - name: Check for Dependency Updates
        run: |
          echo "📦 Checking for dependency updates..."

          # Python dependencies
          if [[ -f "requirements.txt" ]]; then
            pip install pip-audit
            pip-audit || true
          fi

          # Docker base images
          for dockerfile in $(find . -name "Dockerfile"); do
            echo "Checking: $dockerfile"
            base_image=$(grep "^FROM" "$dockerfile" | head -1 | awk '{print $2}')
            echo "  Base image: $base_image"

            # Check if newer version available
            if docker pull "$base_image" > /dev/null 2>&1; then
              echo "  ✅ Latest version available"
            else
              echo "  ⚠️ Could not check for updates"
            fi
          done

  # =================================
  # MONTHLY TASKS
  # =================================
  monthly-audit:
    name: Monthly System Audit
    needs: determine-tasks
    if: needs.determine-tasks.outputs.monthly == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Repository Statistics
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## 📊 Monthly Repository Audit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Repository size
          echo "### Repository Size" >> $GITHUB_STEP_SUMMARY
          size=$(gh api repos/${{ github.repository }} --jq '.size')
          echo "- Size: $((size / 1024)) MB" >> $GITHUB_STEP_SUMMARY

          # Workflow runs
          echo "### Workflow Statistics (Last 30 days)" >> $GITHUB_STEP_SUMMARY

          # Get workflow runs from last 30 days
          since=$(date -u -d "30 days ago" +%Y-%m-%dT%H:%M:%SZ)

          runs=$(gh api \
            "/repos/${{ github.repository }}/actions/runs?created=>$since" \
            --jq '.workflow_runs')

          total=$(echo "$runs" | jq 'length')
          success=$(echo "$runs" | jq '[.[] | select(.conclusion == "success")] | length')
          failed=$(echo "$runs" | jq '[.[] | select(.conclusion == "failure")] | length')

          echo "- Total runs: $total" >> $GITHUB_STEP_SUMMARY
          echo "- Successful: $success ($((success * 100 / total))%)" >> $GITHUB_STEP_SUMMARY
          echo "- Failed: $failed ($((failed * 100 / total))%)" >> $GITHUB_STEP_SUMMARY

          # Container registry usage
          echo "### Container Registry Usage" >> $GITHUB_STEP_SUMMARY

          packages=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/hretheum/packages?package_type=container \
            --jq '.[].name' | grep "^detektr/" | wc -l || echo "0")

          echo "- Total packages: $packages" >> $GITHUB_STEP_SUMMARY

      - name: Cost Analysis
        run: |
          echo "### Estimated Monthly Costs" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Usage | Estimated Cost |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Actions | Free tier | $0 |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Registry | < 1GB | $0 |" >> $GITHUB_STEP_SUMMARY
          echo "| Total | - | $0 |" >> $GITHUB_STEP_SUMMARY

  monthly-backup:
    name: Monthly Backup
    needs: determine-tasks
    if: needs.determine-tasks.outputs.monthly == 'true'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Create Monthly Backup
        run: |
          echo "📦 Creating monthly backup..."

          BACKUP_DIR="/opt/detektor-backups/monthly-$(date +%Y%m)"

          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN - Would create backup in: $BACKUP_DIR"
          else
            # Use maintenance workflow for actual backup
            gh workflow run maintenance.yml \
              -f operation=backup-data \
              -f target="monthly-$(date +%Y%m)"

            echo "✅ Monthly backup initiated"
          fi

      - name: Cleanup Old Backups
        run: |
          echo "🧹 Cleaning old backups..."

          # Keep last 3 monthly backups
          if [[ -d "/opt/detektor-backups" ]]; then
            backups=$(ls -d /opt/detektor-backups/monthly-* 2>/dev/null | sort -r)
            count=0

            for backup in $backups; do
              ((count++))
              if [[ $count -gt 3 ]]; then
                if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
                  echo "DRY RUN - Would delete: $backup"
                else
                  echo "Deleting old backup: $backup"
                  rm -rf "$backup"
                fi
              fi
            done
          fi

  # =================================
  # SUMMARY
  # =================================
  summary:
    name: Task Summary
    needs: [determine-tasks, daily-cleanup, runner-cleanup, weekly-maintenance, security-scan, monthly-audit, monthly-backup]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Summary
        run: |
          echo "## 📅 Scheduled Tasks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Execution Time" >> $GITHUB_STEP_SUMMARY
          echo "- Started: ${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}" >> $GITHUB_STEP_SUMMARY
          echo "- Type: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "- Task: ${{ github.event.inputs.task }}" >> $GITHUB_STEP_SUMMARY
            echo "- Dry Run: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tasks Executed" >> $GITHUB_STEP_SUMMARY
          echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY

          # Daily tasks
          if [[ "${{ needs.determine-tasks.outputs.daily }}" == "true" ]]; then
            echo "| Daily Cleanup | ${{ needs.daily-cleanup.result }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Runner Cleanup | ${{ needs.runner-cleanup.result }} |" >> $GITHUB_STEP_SUMMARY
          fi

          # Weekly tasks
          if [[ "${{ needs.determine-tasks.outputs.weekly }}" == "true" ]]; then
            echo "| Weekly Maintenance | ${{ needs.weekly-maintenance.result }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          fi

          # Monthly tasks
          if [[ "${{ needs.determine-tasks.outputs.monthly }}" == "true" ]]; then
            echo "| Monthly Audit | ${{ needs.monthly-audit.result }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Monthly Backup | ${{ needs.monthly-backup.result }} |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Scheduled tasks completed" >> $GITHUB_STEP_SUMMARY
