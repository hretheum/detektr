name: Manual Service Build

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build'
        required: true
        type: choice
        options:
          - example-otel
          - frame-tracking
          - base-template
          - echo-service
          - gpu-demo
          - rtsp-capture
          - frame-buffer
          - telegram-alerts
      deploy:
        description: 'Deploy after build'
        required: true
        default: false
        type: boolean
      tag:
        description: 'Custom tag (default: latest)'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: hretheum/bezrobocie-detektor

jobs:
  build-single-service:
    name: Build ${{ github.event.inputs.service }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ github.event.inputs.service }}
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}
            type=sha,prefix=manual-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ github.event.inputs.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ github.event.inputs.service }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

      - name: Build Summary
        run: |
          echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ github.event.inputs.service }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Time:** $(date)" >> $GITHUB_STEP_SUMMARY

  deploy-optional:
    name: Deploy to Nebula
    needs: build-single-service
    if: github.event.inputs.deploy == 'true'
    runs-on: [self-hosted, nebula]
    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/deploy-local-on-nebula.sh
            docker-compose.yml
            docker-compose.*.yml
            docker-compose.prod.yml
            .env
            .env.*
            config/
            prometheus.yml
          sparse-checkout-cone-mode: false

      - name: Deploy single service
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_PREFIX: ${{ env.IMAGE_PREFIX }}
          SKIP_HOSTNAME_CHECK: 1
          SINGLE_SERVICE: ${{ github.event.inputs.service }}
          SERVICE_TAG: ${{ github.event.inputs.tag }}
        run: |
          chmod +x scripts/deploy-local-on-nebula.sh

          echo "ðŸš€ Deploying $SINGLE_SERVICE with tag $SERVICE_TAG"

          # Export for script
          export SERVICES_TO_RESTART="$SINGLE_SERVICE"

          ./scripts/deploy-local-on-nebula.sh

      - name: Deployment Summary
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Successfully deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- Service: ${{ github.event.inputs.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: ${{ github.event.inputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- Time: $(date)" >> $GITHUB_STEP_SUMMARY
