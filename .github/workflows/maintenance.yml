name: Maintenance Operations
# Consolidated workflow combining:
# - manual-operations.yml
# - diagnostic.yml
# - manual-service-build.yml
# - test-runner.yml

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - cleanup-docker      # Clean Docker resources
          - cleanup-ghcr       # Clean GitHub Container Registry
          - diagnostic         # Run system diagnostics
          - test-runner        # Test GitHub runner
          - build-service      # Build specific service
          - backup-data        # Backup database and volumes
          - restore-data       # Restore from backup
          - rotate-secrets     # Rotate secrets
          - health-check       # Full system health check
      target:
        description: 'Target (service name for build, backup name for restore)'
        required: false
        default: ''
      force:
        description: 'Force operation (skip confirmations)'
        type: boolean
        default: false
      dry_run:
        description: 'Dry run (show what would be done)'
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/hretheum/detektr

jobs:
  # =================================
  # CLEANUP OPERATIONS
  # =================================
  cleanup:
    name: Cleanup - ${{ github.event.inputs.operation }}
    if: contains(fromJSON('["cleanup-docker", "cleanup-ghcr"]'), github.event.inputs.operation)
    runs-on: ${{ github.event.inputs.operation == 'cleanup-docker' && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4

      - name: Docker Cleanup
        if: github.event.inputs.operation == 'cleanup-docker'
        run: |
          echo "üßπ Cleaning Docker resources..."

          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN - Would execute:"
            echo "  docker system df"
            echo "  docker container prune"
            echo "  docker image prune"
            echo "  docker volume prune (if force=true)"
            docker system df
          else
            # Show current usage
            echo "Current Docker usage:"
            docker system df

            # Clean stopped containers
            echo "Removing stopped containers..."
            docker container prune -f

            # Clean unused images
            echo "Removing unused images..."
            docker image prune -af --filter "until=72h"

            # Clean volumes if forced
            if [[ "${{ github.event.inputs.force }}" == "true" ]]; then
              echo "‚ö†Ô∏è Removing unused volumes (forced)..."
              docker volume prune -f
            fi

            # Clean build cache
            echo "Cleaning build cache..."
            docker builder prune -af --filter "until=72h"

            # Show new usage
            echo "Docker usage after cleanup:"
            docker system df
          fi

      - name: GHCR Cleanup
        if: github.event.inputs.operation == 'cleanup-ghcr'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üßπ Cleaning GitHub Container Registry..."

          # Get all packages
          packages=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/hretheum/packages?package_type=container \
            --jq '.[].name' | grep "^detektr/" || true)

          if [[ -z "$packages" ]]; then
            echo "No packages found"
            exit 0
          fi

          for package in $packages; do
            echo "Processing package: $package"

            # Get all versions
            versions=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/orgs/hretheum/packages/container/$package/versions" \
              --jq '.[] | select(.metadata.container.tags | length == 0) | .id' || true)

            if [[ -z "$versions" ]]; then
              echo "  No untagged versions found"
              continue
            fi

            for version_id in $versions; do
              if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
                echo "  DRY RUN - Would delete version: $version_id"
              else
                echo "  Deleting version: $version_id"
                gh api \
                  --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "/orgs/hretheum/packages/container/$package/versions/$version_id" || true
              fi
            done
          done

  # =================================
  # DIAGNOSTIC OPERATIONS
  # =================================
  diagnostic:
    name: System Diagnostics
    if: github.event.inputs.operation == 'diagnostic'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: System Information
        run: |
          echo "## üîç System Diagnostics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # System info
          echo "### System Information" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Hostname: $(hostname)" >> $GITHUB_STEP_SUMMARY
          echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)" >> $GITHUB_STEP_SUMMARY
          echo "Kernel: $(uname -r)" >> $GITHUB_STEP_SUMMARY
          echo "Uptime: $(uptime -p)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Docker Status
        run: |
          echo "### Docker Status" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker version --format 'Server: {{.Server.Version}}' >> $GITHUB_STEP_SUMMARY
          docker system df >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Service Health
        run: |
          echo "### Service Health" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | Uptime |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check each service
          for service in rtsp-capture frame-tracking metadata-storage; do
            if container=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep "$service" | head -1); then
              name=$(echo "$container" | awk '{print $1}')
              status=$(echo "$container" | awk '{$1=""; print $0}' | xargs)
              echo "| $service | ‚úÖ Running | $status |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $service | ‚ùå Not running | - |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Network Connectivity
        run: |
          echo "### Network Connectivity" >> $GITHUB_STEP_SUMMARY
          echo "| Target | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check connectivity
          targets=(
            "github.com:443"
            "ghcr.io:443"
            "pypi.org:443"
          )

          for target in "${targets[@]}"; do
            if timeout 5 bash -c "echo > /dev/tcp/${target%:*}/${target#*:}" 2>/dev/null; then
              echo "| $target | ‚úÖ Connected |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $target | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          done

  # =================================
  # TEST RUNNER
  # =================================
  test-runner:
    name: Test GitHub Runner
    if: github.event.inputs.operation == 'test-runner'
    runs-on: self-hosted
    steps:
      - name: Runner Information
        run: |
          echo "## üèÉ GitHub Runner Test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Environment" >> $GITHUB_STEP_SUMMARY
          echo "| Variable | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| RUNNER_NAME | $RUNNER_NAME |" >> $GITHUB_STEP_SUMMARY
          echo "| RUNNER_OS | $RUNNER_OS |" >> $GITHUB_STEP_SUMMARY
          echo "| RUNNER_ARCH | $RUNNER_ARCH |" >> $GITHUB_STEP_SUMMARY
          echo "| RUNNER_TEMP | $RUNNER_TEMP |" >> $GITHUB_STEP_SUMMARY

      - name: Test Docker Access
        run: |
          echo "### Docker Access" >> $GITHUB_STEP_SUMMARY
          if docker run --rm hello-world > /dev/null 2>&1; then
            echo "‚úÖ Docker access working" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Docker access failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Test Network Access
        run: |
          echo "### Network Access" >> $GITHUB_STEP_SUMMARY
          if curl -sf https://api.github.com > /dev/null; then
            echo "‚úÖ GitHub API accessible" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå GitHub API not accessible" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Test File System
        run: |
          echo "### File System" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          df -h $RUNNER_TEMP >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # =================================
  # BUILD SERVICE
  # =================================
  build-service:
    name: Build Service - ${{ github.event.inputs.target }}
    if: github.event.inputs.operation == 'build-service'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Validate target
        run: |
          if [[ -z "${{ github.event.inputs.target }}" ]]; then
            echo "‚ùå Target service name is required"
            exit 1
          fi

          # Check if service exists
          service="${{ github.event.inputs.target }}"
          if [[ -d "services/$service" ]]; then
            echo "‚úÖ Building service: $service"
          elif [[ -d "monitoring/$service" ]]; then
            echo "‚úÖ Building monitoring component: $service"
          else
            echo "‚ùå Service not found: $service"
            echo "Available services:"
            ls -la services/
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        run: |
          service="${{ github.event.inputs.target }}"

          # Determine context
          if [[ -d "services/$service" ]]; then
            context="services/$service"
          else
            context="monitoring/$service"
          fi

          # Build
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN - Would build:"
            echo "  Context: $context"
            echo "  Tag: ${{ env.IMAGE_PREFIX }}/$service:manual-$(date +%Y%m%d-%H%M%S)"
          else
            docker buildx build \
              --push \
              --tag "${{ env.IMAGE_PREFIX }}/$service:manual-$(date +%Y%m%d-%H%M%S)" \
              --tag "${{ env.IMAGE_PREFIX }}/$service:latest" \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              "$context"
          fi

  # =================================
  # BACKUP/RESTORE
  # =================================
  backup-restore:
    name: ${{ github.event.inputs.operation == 'backup-data' && 'Backup' || 'Restore' }} Data
    if: contains(fromJSON('["backup-data", "restore-data"]'), github.event.inputs.operation)
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Backup Data
        if: github.event.inputs.operation == 'backup-data'
        run: |
          echo "üì¶ Backing up data..."

          BACKUP_DIR="/opt/detektor-backups/$(date +%Y%m%d-%H%M%S)"

          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN - Would create backup in: $BACKUP_DIR"
            echo "Would backup:"
            echo "  - PostgreSQL databases"
            echo "  - Docker volumes"
            echo "  - Configuration files"
          else
            mkdir -p "$BACKUP_DIR"

            # Backup PostgreSQL
            echo "Backing up PostgreSQL..."
            docker exec postgres pg_dumpall -U detektor > "$BACKUP_DIR/postgres.sql"

            # Backup volumes
            echo "Backing up volumes..."
            for volume in $(docker volume ls -q | grep detektor); do
              echo "  Backing up volume: $volume"
              docker run --rm -v "$volume:/data" -v "$BACKUP_DIR:/backup" \
                alpine tar -czf "/backup/$volume.tar.gz" -C /data .
            done

            # Create manifest
            echo "Creating manifest..."
            cat > "$BACKUP_DIR/manifest.json" <<EOF
            {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "version": "1.0",
              "volumes": $(docker volume ls -q | grep detektor | jq -R . | jq -s .),
              "services": $(docker ps --format '{{.Names}}' | grep detektor | jq -R . | jq -s .)
            }
            EOF

            echo "‚úÖ Backup completed: $BACKUP_DIR"
            ls -la "$BACKUP_DIR"
          fi

      - name: Restore Data
        if: github.event.inputs.operation == 'restore-data'
        run: |
          echo "üì¶ Restoring data..."

          if [[ -z "${{ github.event.inputs.target }}" ]]; then
            echo "‚ùå Backup name required for restore"
            echo "Available backups:"
            ls -la /opt/detektor-backups/
            exit 1
          fi

          BACKUP_DIR="/opt/detektor-backups/${{ github.event.inputs.target }}"

          if [[ ! -d "$BACKUP_DIR" ]]; then
            echo "‚ùå Backup not found: $BACKUP_DIR"
            exit 1
          fi

          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN - Would restore from: $BACKUP_DIR"
            echo "Contents:"
            ls -la "$BACKUP_DIR"
          else
            if [[ "${{ github.event.inputs.force }}" != "true" ]]; then
              echo "‚ö†Ô∏è WARNING: This will overwrite existing data!"
              echo "Re-run with force=true to confirm"
              exit 1
            fi

            echo "Restoring from: $BACKUP_DIR"

            # Stop services
            echo "Stopping services..."
            docker compose down

            # Restore PostgreSQL
            if [[ -f "$BACKUP_DIR/postgres.sql" ]]; then
              echo "Restoring PostgreSQL..."
              docker compose up -d postgres
              sleep 10
              docker exec -i postgres psql -U detektor < "$BACKUP_DIR/postgres.sql"
            fi

            # Restore volumes
            for backup in "$BACKUP_DIR"/*.tar.gz; do
              volume=$(basename "$backup" .tar.gz)
              echo "Restoring volume: $volume"
              docker run --rm -v "$volume:/data" -v "$BACKUP_DIR:/backup" \
                alpine tar -xzf "/backup/$(basename "$backup")" -C /data
            done

            # Restart services
            echo "Starting services..."
            docker compose up -d

            echo "‚úÖ Restore completed"
          fi

  # =================================
  # SECRET ROTATION
  # =================================
  rotate-secrets:
    name: Rotate Secrets
    if: github.event.inputs.operation == 'rotate-secrets'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Rotate Secrets
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          echo "üîê Rotating secrets..."

          if ! command -v sops &> /dev/null; then
            echo "Installing SOPS..."
            curl -LO https://github.com/getsops/sops/releases/latest/download/sops-linux-amd64
            chmod +x sops-linux-amd64
            sudo mv sops-linux-amd64 /usr/local/bin/sops
          fi

          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN - Would rotate secrets in .env.sops"
            sops -d .env.sops | grep -E "^[A-Z_]+=" | cut -d= -f1 | while read key; do
              echo "  Would regenerate: $key"
            done
          else
            echo "Not implemented - manual secret rotation required"
            echo "Please update secrets in .env.sops manually"
          fi

  # =================================
  # HEALTH CHECK
  # =================================
  health-check:
    name: Full System Health Check
    if: github.event.inputs.operation == 'health-check'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Run Health Checks
        run: |
          echo "## üè• System Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          ./scripts/deploy.sh production verify || true

          # Additional checks
          echo "### Additional Checks" >> $GITHUB_STEP_SUMMARY

          # Check circuit breaker
          if [[ -x "./scripts/deployment-circuit-breaker.sh" ]]; then
            echo "#### Circuit Breaker Status" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            ./scripts/deployment-circuit-breaker.sh status >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          # Check runner health
          if [[ -x "./scripts/runner-health-check.sh" ]]; then
            echo "#### GitHub Runner Health" >> $GITHUB_STEP_SUMMARY
            if ./scripts/runner-health-check.sh; then
              echo "‚úÖ Runner healthy" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå Runner unhealthy" >> $GITHUB_STEP_SUMMARY
            fi
          fi
