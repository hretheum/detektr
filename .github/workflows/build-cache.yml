name: Build Cache Warmup
# Optimizes build performance by pre-warming Docker build cache

on:
  schedule:
    # Run every Monday at 1 AM UTC
    - cron: '0 1 * * 1'
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to warm cache for'
        default: 'all'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/hretheum/detektr

jobs:
  warm-cache:
    name: Warm Build Cache
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - rtsp-capture
          - frame-tracking
          - frame-buffer
          - telegram-alerts
          - metadata-storage
          - webhook-monitor
      max-parallel: 3
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Check if service selected
        id: check
        run: |
          if [[ "${{ github.event.inputs.services }}" == "all" ]] || [[ -z "${{ github.event.inputs.services }}" ]]; then
            echo "selected=true" >> $GITHUB_OUTPUT
          elif echo "${{ github.event.inputs.services }}" | grep -q "${{ matrix.service }}"; then
            echo "selected=true" >> $GITHUB_OUTPUT
          else
            echo "selected=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.check.outputs.selected == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Registry
        if: steps.check.outputs.selected == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build cache layers
        if: steps.check.outputs.selected == 'true'
        run: |
          service="${{ matrix.service }}"

          # Determine context
          if [[ "$service" == "webhook-monitor" ]]; then
            context="monitoring/$service"
          else
            context="services/$service"
          fi

          # Build with cache export
          docker buildx build \
            --cache-from type=gha,scope=$service \
            --cache-to type=gha,scope=$service,mode=max \
            --tag "${{ env.IMAGE_PREFIX }}/$service:cache" \
            --output type=cacheonly \
            "$context"

          echo "âœ… Cache warmed for $service"
