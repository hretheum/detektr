name: Unified CI/CD Pipeline

on:
  # TEMPLATE WORKFLOW - NOT ACTIVE
  # This is a template for future consolidation of workflows
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (leave empty for all)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/detektr

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.detect.outputs.services }}
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: detect
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.service }}" ]; then
            # Manual trigger for specific service
            SERVICES='["${{ github.event.inputs.service }}"]'
          else
            # Auto-detect changed services
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || git diff --name-only HEAD)
            SERVICES="[]"

            # Check each service directory
            for service in services/*/; do
              service_name=$(basename "$service")
              if echo "$CHANGED_FILES" | grep -q "services/$service_name/"; then
                SERVICES=$(echo "$SERVICES" | jq ". += [\"$service_name\"]")
              fi
            done

            # Check for docker-compose changes
            if echo "$CHANGED_FILES" | grep -q "docker-compose"; then
              SERVICES=$(echo "$SERVICES" | jq '. += ["compose-update"]')
            fi
          fi

          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          echo "matrix={\"service\":$SERVICES}" >> $GITHUB_OUTPUT
          echo "Changed services: $SERVICES"

  build-and-push:
    needs: detect-changes
    if: needs.detect-changes.outputs.services != '[]'
    runs-on: self-hosted
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push service
        if: matrix.service != 'compose-update'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest
            ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}

  deploy:
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Decrypt secrets
        run: |
          export SOPS_AGE_KEY_FILE=$HOME/.config/sops/age/keys.txt
          sops -d .env > .env.decrypted

      - name: Deploy services
        run: |
          cd /opt/detektor

          # Update docker-compose files
          cp $GITHUB_WORKSPACE/docker-compose*.yml .
          cp $GITHUB_WORKSPACE/.env.decrypted .env.decrypted

          # Pull latest images
          docker compose pull

          # Restart services with zero downtime
          docker compose up -d --remove-orphans

          # Wait for health checks
          sleep 30

          # Verify deployment
          docker compose ps

          # Cleanup
          rm -f .env.decrypted

      - name: Health check
        run: |
          # Check all services
          for port in 8001 8002 8003 8004 8005 8006 8007 8008 8009; do
            if curl -f http://localhost:$port/health 2>/dev/null; then
              echo "✅ Service on port $port is healthy"
            fi
          done

          # Check databases
          docker exec detektor-postgres-1 pg_isready || echo "⚠️ PostgreSQL not ready"
          docker exec detektor-redis-1 redis-cli ping || echo "⚠️ Redis not ready"

  cleanup:
    needs: deploy
    if: always()
    runs-on: self-hosted
    steps:
      - name: Clean workspace
        run: |
          rm -f .env.decrypted
          docker system prune -f
