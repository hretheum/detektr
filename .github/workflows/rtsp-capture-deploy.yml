name: RTSP Capture CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'services/rtsp-capture/**'
      - '.github/workflows/rtsp-capture-deploy.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: hretheum/bezrobocie-detektor/rtsp-capture

jobs:
  test-and-build:
    name: Test & Build RTSP Capture
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('services/rtsp-capture/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd services/rtsp-capture
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests
      run: |
        cd services/rtsp-capture
        pytest tests/ -v --tb=short
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        RTSP_URL: rtsp://test:8554/stream

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: services/rtsp-capture
        file: services/rtsp-capture/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Security scan (print only)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'table'
        exit-code: '0'

  deploy:
    name: Deploy to Nebula
    runs-on: self-hosted
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Deploy service
      run: |
        cd /opt/detektor
        docker compose pull rtsp-capture
        docker compose up -d rtsp-capture

    - name: Health check
      run: |
        cd /opt/detektor
        timeout 60 bash -c 'until curl -f http://localhost:8001/health; do sleep 5; done' || {
          echo "‚ùå Health check failed"
          docker compose logs rtsp-capture
          exit 1
        }
