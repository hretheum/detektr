#!/bin/bash
set -euo pipefail

# Manual deployment script for Nebula server
# Pulls images from GHCR and deploys services locally

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Configuration
REGISTRY="ghcr.io"
IMAGE_PREFIX="hretheum/bezrobocie-detektor"

# Services to deploy (excluding gpu-demo for now)
SERVICES=(
    "example-otel"
    "frame-tracking"
    "base-template"
    "echo-service"
)

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*"
}

error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

# Check if running on Nebula
check_environment() {
    log "Checking environment..."

    # Check if Docker is available
    if ! command -v docker &> /dev/null; then
        error "Docker is not installed or not in PATH"
        exit 1
    fi

    # Check if we can run Docker commands
    if ! docker ps &> /dev/null; then
        error "Cannot run Docker commands. Check Docker daemon and permissions."
        exit 1
    fi

    # Check if we're in the right directory
    if [[ ! -f "$PROJECT_ROOT/docker-compose.yml" ]]; then
        error "Not in detektor project directory. Run from project root."
        exit 1
    fi

    # Check if SOPS is available for secrets
    if command -v sops &> /dev/null && [[ -f "$PROJECT_ROOT/.env" ]]; then
        info "SOPS available - will decrypt secrets"
        export HAS_SOPS=true
    else
        warning "SOPS not available or .env not found - using environment variables"
        export HAS_SOPS=false
    fi

    log "Environment check passed ✓"
}

# Authenticate with GitHub Container Registry
authenticate_registry() {
    log "Authenticating with GitHub Container Registry..."

    # Check if already logged in
    if docker system info | grep -q "ghcr.io"; then
        log "Already authenticated with ghcr.io ✓"
        return
    fi

    # Try to login (will prompt for token if needed)
    info "Login to ghcr.io (use GitHub Personal Access Token with packages:read scope)"
    if ! docker login ghcr.io; then
        error "Failed to authenticate with ghcr.io"
        error "Create a GitHub Personal Access Token with 'packages:read' scope"
        error "Then run: docker login ghcr.io"
        exit 1
    fi

    log "Authentication successful ✓"
}

# Pull latest images
pull_images() {
    log "Pulling latest images from registry..."

    for service in "${SERVICES[@]}"; do
        local image="${REGISTRY}/${IMAGE_PREFIX}/${service}:latest"
        log "Pulling ${service}..."

        if ! docker pull "$image"; then
            error "Failed to pull $image"
            error "Check network connection and registry authentication"
            exit 1
        fi
    done

    log "All images pulled ✓"
}

# Setup environment files
setup_environment() {
    log "Setting up environment..."

    # Decrypt secrets if SOPS is available
    if [[ "$HAS_SOPS" == "true" ]]; then
        log "Decrypting secrets with SOPS..."
        sops -d "$PROJECT_ROOT/.env" > "$PROJECT_ROOT/.env.local"
        chmod 600 "$PROJECT_ROOT/.env.local"
    else
        warning "No SOPS - create .env.local manually or export required variables"
        info "Required variables: DATABASE_URL, OTEL_EXPORTER_OTLP_ENDPOINT, etc."
    fi

    log "Environment setup complete ✓"
}

# Generate production docker-compose
generate_production_compose() {
    log "Generating production docker-compose..."

    cat > "$PROJECT_ROOT/docker-compose.prod.yml" <<EOF
# Production docker-compose for Nebula
# Auto-generated by manual-deploy.sh

services:
  # Example OTEL Service
  example-otel:
    image: ${REGISTRY}/${IMAGE_PREFIX}/example-otel:latest
    container_name: example-otel
    ports:
      - "8005:8005"
    environment:
      - SERVICE_NAME=example-otel
      - SERVICE_VERSION=0.1.0
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - LOG_LEVEL=info
    networks:
      - detektor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frame Tracking Service
  frame-tracking:
    image: ${REGISTRY}/${IMAGE_PREFIX}/frame-tracking:latest
    container_name: frame-tracking
    ports:
      - "8006:8006"
    environment:
      - SERVICE_NAME=frame-tracking
      - SERVICE_VERSION=0.1.0
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - LOG_LEVEL=info
    networks:
      - detektor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base Template Service
  base-template:
    image: ${REGISTRY}/${IMAGE_PREFIX}/base-template:latest
    container_name: base-template
    ports:
      - "8010:8010"
    environment:
      - SERVICE_NAME=base-template
      - SERVICE_VERSION=0.1.0
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - LOG_LEVEL=info
    networks:
      - detektor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Echo Service
  echo-service:
    image: ${REGISTRY}/${IMAGE_PREFIX}/echo-service:latest
    container_name: echo-service
    ports:
      - "8007:8007"
    environment:
      - SERVICE_NAME=echo-service
      - SERVICE_VERSION=0.1.0
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - LOG_LEVEL=info
    networks:
      - detektor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  detektor-network:
    external: true

EOF

    log "Production compose generated ✓"
}

# Start infrastructure services
start_infrastructure() {
    log "Starting infrastructure services..."

    # Ensure network exists
    docker network create detektor-network 2>/dev/null || true

    # Start observability stack
    if [[ -f "$PROJECT_ROOT/docker-compose.observability.yml" ]]; then
        log "Starting observability services (Prometheus, Jaeger, Grafana)..."
        docker compose -f "$PROJECT_ROOT/docker-compose.observability.yml" up -d
    else
        warning "docker-compose.observability.yml not found - skipping observability services"
    fi

    # Start storage services
    if [[ -f "$PROJECT_ROOT/docker-compose.storage.yml" ]]; then
        log "Starting storage services (PostgreSQL, Redis)..."
        docker compose -f "$PROJECT_ROOT/docker-compose.storage.yml" up -d
    else
        warning "docker-compose.storage.yml not found - skipping storage services"
    fi

    # Wait for infrastructure
    log "Waiting for infrastructure to be ready..."
    sleep 10

    log "Infrastructure services started ✓"
}

# Deploy application services
deploy_services() {
    log "Deploying application services..."

    # Use environment file if available
    local env_file=""
    if [[ -f "$PROJECT_ROOT/.env.local" ]]; then
        env_file="--env-file $PROJECT_ROOT/.env.local"
    fi

    # Deploy with production compose
    if [[ -n "$env_file" ]]; then
        docker compose -f "$PROJECT_ROOT/docker-compose.prod.yml" "$env_file" up -d
    else
        docker compose -f "$PROJECT_ROOT/docker-compose.prod.yml" up -d
    fi

    log "Application services deployed ✓"
}

# Verify deployment
verify_deployment() {
    log "Verifying deployment..."

    sleep 5  # Give services time to start

    local all_healthy=true

    # Check application services
    for service in "${SERVICES[@]}"; do
        local port
        case $service in
            example-otel) port=8005 ;;
            frame-tracking) port=8006 ;;
            base-template) port=8010 ;;
            echo-service) port=8007 ;;
        esac

        if curl -sf "http://localhost:$port/health" >/dev/null 2>&1; then
            log "$service (port $port) - ✓ healthy"
        else
            error "$service (port $port) - ✗ unhealthy"
            all_healthy=false
        fi
    done

    # Check observability services
    if curl -sf "http://localhost:9090/-/healthy" >/dev/null 2>&1; then
        log "Prometheus (port 9090) - ✓ healthy"
    else
        warning "Prometheus (port 9090) - ✗ unhealthy or not available"
    fi

    if curl -sf "http://localhost:16686/" >/dev/null 2>&1; then
        log "Jaeger (port 16686) - ✓ healthy"
    else
        warning "Jaeger (port 16686) - ✗ unhealthy or not available"
    fi

    if curl -sf "http://localhost:3000/" >/dev/null 2>&1; then
        log "Grafana (port 3000) - ✓ healthy"
    else
        warning "Grafana (port 3000) - ✗ unhealthy or not available"
    fi

    if [[ "$all_healthy" == "true" ]]; then
        log "All application services healthy! 🎉"
    else
        error "Some application services are unhealthy"
        info "Check logs with: docker compose -f docker-compose.prod.yml logs [service-name]"
        exit 1
    fi
}

# Cleanup
cleanup() {
    log "Cleaning up..."

    # Remove temporary files
    rm -f "$PROJECT_ROOT/.env.local"

    # Clean old Docker images
    docker image prune -f >/dev/null 2>&1 || true

    log "Cleanup complete ✓"
}

# Show deployment status
show_status() {
    log "Deployment completed successfully! 🚀"
    echo ""
    info "Access services at:"
    info "  🔬 Example OTEL:   http://localhost:8005"
    info "  📊 Frame Tracking: http://localhost:8006"
    info "  🔧 Base Template:  http://localhost:8010"
    info "  📢 Echo Service:   http://localhost:8007"
    echo ""
    info "Observability:"
    info "  📈 Prometheus:     http://localhost:9090"
    info "  🔍 Jaeger:         http://localhost:16686"
    info "  📊 Grafana:        http://localhost:3000"
    echo ""
    info "Useful commands:"
    info "  📋 View logs:      docker compose -f docker-compose.prod.yml logs [service]"
    info "  🔄 Restart:       docker compose -f docker-compose.prod.yml restart [service]"
    info "  🛑 Stop all:      docker compose -f docker-compose.prod.yml down"
    info "  🗑️ Full cleanup:   docker compose -f docker-compose.prod.yml down --rmi all -v"
}

# Main deployment flow
main() {
    log "Starting manual deployment to Nebula..."

    check_environment
    authenticate_registry
    pull_images
    setup_environment
    generate_production_compose
    start_infrastructure
    deploy_services
    verify_deployment
    cleanup
    show_status
}

# Handle script arguments
case "${1:-}" in
    "pull")
        log "Pulling images only..."
        check_environment
        authenticate_registry
        pull_images
        ;;
    "deploy")
        log "Deploying services only (assuming images are already pulled)..."
        check_environment
        generate_production_compose
        deploy_services
        verify_deployment
        show_status
        ;;
    "verify")
        log "Verifying deployment only..."
        verify_deployment
        ;;
    *)
        main
        ;;
esac
