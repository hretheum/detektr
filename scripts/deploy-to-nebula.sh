#!/bin/bash
set -euo pipefail

# shellcheck disable=SC2029  # We intentionally expand variables on client side for deployment

# Deployment script for Nebula server
# This script should be run from GitHub Actions or locally with proper environment

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Configuration
REGISTRY="ghcr.io"
IMAGE_PREFIX="hretheum/bezrobocie-detektor"
NEBULA_HOST="${NEBULA_HOST:-nebula}"
NEBULA_USER="${NEBULA_USER:-hretheum}"
NEBULA_PROJECT_DIR="/opt/detektor"

# Services to deploy
SERVICES=(
    "example-otel"
    "frame-tracking"
    "echo-service"
    "gpu-demo"
    "rtsp-capture"
)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*"
}

error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."

    # Check SSH access
    if ! ssh -o ConnectTimeout=5 "${NEBULA_USER}@${NEBULA_HOST}" "echo 'SSH OK'" >/dev/null 2>&1; then
        error "Cannot connect to ${NEBULA_HOST}. Check SSH configuration."
        exit 1
    fi

    # Check SOPS
    if ! command -v sops &> /dev/null; then
        error "SOPS is not installed. Please install it first."
        exit 1
    fi

    # Check if .env exists
    if [[ ! -f "$PROJECT_ROOT/.env" ]]; then
        error ".env file not found in project root"
        exit 1
    fi

    log "Prerequisites check passed âœ“"
}

# Decrypt secrets
decrypt_secrets() {
    log "Decrypting secrets..."

    if [[ -z "${SOPS_AGE_KEY:-}" ]]; then
        error "SOPS_AGE_KEY environment variable not set"
        exit 1
    fi

    # Decrypt .env file
    sops -d "$PROJECT_ROOT/.env" > "$PROJECT_ROOT/.env.decrypted"

    log "Secrets decrypted âœ“"
}

# Pull Docker images
pull_images() {
    log "Pulling Docker images from registry..."

    local tag="${GITHUB_SHA:-latest}"

    for service in "${SERVICES[@]}"; do
        local image="${REGISTRY}/${IMAGE_PREFIX}/${service}:${tag}"
        log "Pulling ${service}..."

        ssh "${NEBULA_USER}@${NEBULA_HOST}" "docker pull '${image}'" || {
            error "Failed to pull ${image}"
            exit 1
        }
    done

    log "All images pulled âœ“"
}

# Update docker-compose files
update_compose_files() {
    log "Updating docker-compose files..."

    # Generate docker-compose.prod.yml with correct image tags
    local tag="${GITHUB_SHA:-latest}"

    cat > "$PROJECT_ROOT/docker-compose.prod.yml" <<EOF
# Auto-generated production docker-compose file
# DO NOT EDIT MANUALLY - Generated by deploy-to-nebula.sh

version: '3.8'

services:
  example-otel:
    image: ${REGISTRY}/${IMAGE_PREFIX}/example-otel:${tag}
    restart: unless-stopped
    ports:
      - "8005:8000"
    environment:
      - SERVICE_NAME=example-otel
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_MULTIPROC_DIR=/tmp
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frame-tracking:
    image: ${REGISTRY}/${IMAGE_PREFIX}/frame-tracking:${tag}
    restart: unless-stopped
    ports:
      - "8006:8000"
    environment:
      - SERVICE_NAME=frame-tracking
      - DATABASE_URL=postgresql://detektor:detektor@postgres:5432/detektor
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    networks:
      - detektor-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  echo-service:
    image: ${REGISTRY}/${IMAGE_PREFIX}/echo-service:${tag}
    restart: unless-stopped
    ports:
      - "8007:8000"
    environment:
      - SERVICE_NAME=echo-service
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  gpu-demo:
    image: ${REGISTRY}/${IMAGE_PREFIX}/gpu-demo:${tag}
    restart: unless-stopped
    ports:
      - "8008:8000"
    environment:
      - SERVICE_NAME=gpu-demo
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    networks:
      - detektor-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  rtsp-capture:
    image: ${REGISTRY}/${IMAGE_PREFIX}/rtsp-capture:${tag}
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - SERVICE_NAME=rtsp-capture
      - RTSP_URL=${RTSP_URL:-rtsp://localhost:8554/stream}
      - FRAME_BUFFER_SIZE=${FRAME_BUFFER_SIZE:-100}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=rtsp-capture
    networks:
      - detektor-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  detektor-network:
    external: true
EOF

    log "Docker-compose files updated âœ“"
}

# Deploy files to server
deploy_files() {
    log "Deploying files to Nebula..."

    # Create deployment directory if not exists
    ssh "${NEBULA_USER}@${NEBULA_HOST}" "sudo mkdir -p '${NEBULA_PROJECT_DIR}' && sudo chown '${NEBULA_USER}:${NEBULA_USER}' '${NEBULA_PROJECT_DIR}'"

    # Copy docker-compose files
    scp "$PROJECT_ROOT/docker-compose.prod.yml" "${NEBULA_USER}@${NEBULA_HOST}:${NEBULA_PROJECT_DIR}/docker-compose.yml"
    scp "$PROJECT_ROOT/docker-compose.observability.yml" "${NEBULA_USER}@${NEBULA_HOST}:${NEBULA_PROJECT_DIR}/"
    scp "$PROJECT_ROOT/docker-compose.storage.yml" "${NEBULA_USER}@${NEBULA_HOST}:${NEBULA_PROJECT_DIR}/"

    # Copy decrypted .env
    scp "$PROJECT_ROOT/.env.decrypted" "${NEBULA_USER}@${NEBULA_HOST}:${NEBULA_PROJECT_DIR}/.env"
    ssh "${NEBULA_USER}@${NEBULA_HOST}" "chmod 600 '${NEBULA_PROJECT_DIR}'/.env"

    # Copy necessary scripts
    ssh "${NEBULA_USER}@${NEBULA_HOST}" "mkdir -p '${NEBULA_PROJECT_DIR}'/scripts"
    scp "$PROJECT_ROOT/scripts/health-check-all.sh" "${NEBULA_USER}@${NEBULA_HOST}:${NEBULA_PROJECT_DIR}/scripts/"
    ssh "${NEBULA_USER}@${NEBULA_HOST}" "chmod +x '${NEBULA_PROJECT_DIR}'/scripts/*.sh"

    log "Files deployed âœ“"
}

# Start services
start_services() {
    log "Starting services on Nebula..."

    # Ensure network exists
    ssh "${NEBULA_USER}@${NEBULA_HOST}" "docker network create detektor-network 2>/dev/null || true"

    # Start infrastructure services first
    ssh "${NEBULA_USER}@${NEBULA_HOST}" "cd '${NEBULA_PROJECT_DIR}' && docker-compose -f docker-compose.observability.yml up -d"
    ssh "${NEBULA_USER}@${NEBULA_HOST}" "cd '${NEBULA_PROJECT_DIR}' && docker-compose -f docker-compose.storage.yml up -d"

    # Wait for infrastructure to be ready
    log "Waiting for infrastructure services..."
    sleep 10

    # Start application services
    ssh "${NEBULA_USER}@${NEBULA_HOST}" "cd '${NEBULA_PROJECT_DIR}' && docker-compose up -d"

    log "Services started âœ“"
}

# Verify deployment
verify_deployment() {
    log "Verifying deployment..."

    local all_healthy=true

    # Check each service health
    for service in "${SERVICES[@]}"; do
        local port
        case $service in
            example-otel) port=8005 ;;
            frame-tracking) port=8006 ;;
            echo-service) port=8007 ;;
            gpu-demo) port=8008 ;;
            rtsp-capture) port=8001 ;;
        esac

        if ssh "${NEBULA_USER}@${NEBULA_HOST}" "curl -sf http://localhost:'${port}'/health >/dev/null 2>&1"; then
            log "${service} - âœ“ healthy"
        else
            error "${service} - âœ— unhealthy"
            all_healthy=false
        fi
    done

    # Check observability services
    if ssh "${NEBULA_USER}@${NEBULA_HOST}" "curl -sf http://localhost:9090/-/healthy >/dev/null 2>&1"; then
        log "Prometheus - âœ“ healthy"
    else
        error "Prometheus - âœ— unhealthy"
        all_healthy=false
    fi

    if ssh "${NEBULA_USER}@${NEBULA_HOST}" "curl -sf http://localhost:16686/ >/dev/null 2>&1"; then
        log "Jaeger - âœ“ healthy"
    else
        error "Jaeger - âœ— unhealthy"
        all_healthy=false
    fi

    if [[ "$all_healthy" == "true" ]]; then
        log "All services healthy! ðŸŽ‰"
    else
        error "Some services are unhealthy. Check logs with:"
        error "ssh ${NEBULA_USER}@${NEBULA_HOST} 'cd ${NEBULA_PROJECT_DIR} && docker-compose logs'"
        exit 1
    fi
}

# Cleanup
cleanup() {
    log "Cleaning up..."

    # Remove decrypted files
    rm -f "$PROJECT_ROOT/.env.decrypted"

    # Clean old Docker images on server
    ssh "${NEBULA_USER}@${NEBULA_HOST}" "docker image prune -f" || true

    log "Cleanup complete âœ“"
}

# Main deployment flow
main() {
    log "Starting deployment to Nebula server..."

    check_prerequisites
    decrypt_secrets
    pull_images
    update_compose_files
    deploy_files
    start_services
    verify_deployment
    cleanup

    log "Deployment completed successfully! ðŸš€"
    log "Access services at:"
    log "  - RTSP Capture: http://${NEBULA_HOST}:8001"
    log "  - Example OTEL: http://${NEBULA_HOST}:8005"
    log "  - Frame Tracking: http://${NEBULA_HOST}:8006"
    log "  - Echo Service: http://${NEBULA_HOST}:8007"
    log "  - GPU Demo: http://${NEBULA_HOST}:8008"
    log "  - Prometheus: http://${NEBULA_HOST}:9090"
    log "  - Jaeger: http://${NEBULA_HOST}:16686"
    log "  - Grafana: http://${NEBULA_HOST}:3000"
}

# Run main function
main "$@"
