services:
  # PostgreSQL with TimescaleDB from registry
  postgres:
    image: ghcr.io/hretheum/bezrobocie-detektor/timescaledb:latest
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-detektor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-detektor}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      TIMESCALEDB_TELEMETRY: "off"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # PgBouncer for connection pooling from registry
  pgbouncer:
    image: ghcr.io/hretheum/bezrobocie-detektor/pgbouncer:latest
    restart: unless-stopped
    ports:
      - "6432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-detektor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-detektor}_db
      AUTH_TYPE: scram-sha-256
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 200
      DEFAULT_POOL_SIZE: 25
      QUERY_WAIT_TIMEOUT: 120
    networks:
      - detektor-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "5432"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  # Database migration runner (one-time job)
  db-migrate:
    image: ghcr.io/hretheum/bezrobocie-detektor/timescaledb:latest
    command: |
      bash -c "
        echo 'Waiting for database to be ready...'
        until pg_isready -h postgres -U $$POSTGRES_USER; do
          sleep 2
        done
        echo 'Running migrations...'
        for migration in /migrations/*.sql; do
          echo \"Running $$migration\"
          psql -h postgres -U $$POSTGRES_USER -d $$POSTGRES_DB -f $$migration
        done
        echo 'Migrations completed!'
      "
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-detektor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-detektor}_db
      PGPASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - detektor-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - migrate

volumes:
  postgres-data:
    external: true
    name: postgres_data

networks:
  detektor-network:
    external: true
