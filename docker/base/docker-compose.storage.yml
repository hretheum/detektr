# Storage services (Redis, PostgreSQL)
# This file contains all persistent storage services
# Use with: docker-compose -f docker-compose.yml -f docker-compose.storage.yml up

services:
  # =================================
  # REDIS - Message Broker & Cache
  # =================================

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      redis-server
      --maxmemory ${REDIS_MAX_MEMORY:-512mb}
      --maxmemory-policy ${REDIS_MAX_MEMORY_POLICY:-allkeys-lru}
      --save 60 1000
      --appendonly yes
      --appendfsync everysec

  # =================================
  # POSTGRESQL + TIMESCALEDB
  # =================================

  postgres:
    image: timescale/timescaledb:latest-pg15
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-detektor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-detektor}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      TS_TUNE_MAX_CONNS: ${POSTGRES_MAX_CONNECTIONS:-100}
      TS_TUNE_MAX_BG_WORKERS: ${POSTGRES_MAX_BG_WORKERS:-8}
      SHARED_PRELOAD_LIBRARIES: "timescaledb,pg_stat_statements"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - detektor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    shm_size: 256mb

  # =================================
  # REDIS EXPORTER (for Prometheus)
  # =================================

  redis-exporter:
    image: oliver006/redis_exporter:latest
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_EXPORTER_DEBUG: ${REDIS_EXPORTER_DEBUG:-false}
      REDIS_EXPORTER_LOG_FORMAT: json
      REDIS_EXPORTER_CHECK_KEYS: "*"
    networks:
      - detektor-network
    depends_on:
      - redis
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9121"
      - "prometheus.io/path=/metrics"
    profiles:
      - monitoring

  # =================================
  # POSTGRES EXPORTER (for Prometheus)
  # =================================

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-detektor}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-detektor}?sslmode=disable"
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: "true"
      PG_EXPORTER_INCLUDE_DATABASES: "${POSTGRES_DB:-detektor}"
    networks:
      - detektor-network
    depends_on:
      - postgres
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9187"
      - "prometheus.io/path=/metrics"
    profiles:
      - monitoring

  # =================================
  # PGBOUNCER - Connection Pooling
  # =================================

  pgbouncer:
    image: bitnami/pgbouncer:latest
    restart: unless-stopped
    ports:
      - "6432:6432"
    environment:
      POSTGRESQL_HOST: postgres
      POSTGRESQL_PORT: 5432
      POSTGRESQL_DATABASE: ${POSTGRES_DB:-detektor}
      POSTGRESQL_USERNAME: ${POSTGRES_USER:-detektor}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD:-detektor_pass}
      PGBOUNCER_DATABASE: ${POSTGRES_DB:-detektor}
      PGBOUNCER_AUTH_TYPE: md5
      PGBOUNCER_POOL_MODE: transaction
      PGBOUNCER_MAX_CLIENT_CONN: 200
      PGBOUNCER_DEFAULT_POOL_SIZE: 25
      PGBOUNCER_SET_DATABASE_USER: "yes"
      PGBOUNCER_SET_DATABASE_PASSWORD: "yes"
    networks:
      - detektor-network
    depends_on:
      - postgres
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "PGPASSWORD=${POSTGRES_PASSWORD:-detektor_pass} /opt/bitnami/postgresql/bin/psql -h localhost -p 6432 -U ${POSTGRES_USER:-detektor} -d ${POSTGRES_DB:-detektor} -c 'SELECT 1' || exit 1",
        ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  redis_data:
    driver: local
    name: detektor_redis_data
  postgres_data:
    driver: local
    name: detektor_postgres_data

networks:
  detektor-network:
    external: true
    name: detektor-network
